Index: python-selenium-master/report/2018-03-24_18_43.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/report/2018-03-24_18_43.html b/python-selenium-master/report/2018-03-24_18_43.html
new file mode 100644
--- /dev/null	(date 1662812104414)
+++ b/python-selenium-master/report/2018-03-24_18_43.html	(date 1662812104414)
@@ -0,0 +1,687 @@
+<!DOCTYPE html>
+<html lang="zh-cn">
+  <head>
+    <meta charset="utf-8">
+    <meta http-equiv="X-UA-Compatible" content="IE=edge">
+    <meta name="viewport" content="width=device-width, initial-scale=1">
+    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+    <title>自动化测试报告</title>
+    <meta name="generator" content="BSTestRunner 0.8.4"/>
+    <link rel="stylesheet" href="http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css">
+    
+<style type="text/css" media="screen">
+
+/* -- css div popup ------------------------------------------------------------------------ */
+.popup_window {
+    display: none;
+    position: relative;
+    left: 0px;
+    top: 0px;
+    /*border: solid #627173 1px; */
+    padding: 10px;
+    background-color: #99CCFF;
+    font-family: "Lucida Console", "Courier New", Courier, monospace;
+    text-align: left;
+    font-size: 10pt;
+    width: 1200px;
+}
+
+/* -- report ------------------------------------------------------------------------ */
+
+#show_detail_line .label {
+    font-size: 85%;
+    cursor: pointer;
+}
+
+#show_detail_line {
+    margin: 2em auto 1em auto;
+}
+
+#total_row  { font-weight: bold; }
+.hiddenRow  { display: none; }
+.case   { margin-left: 2em; }
+
+</style>
+
+
+    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
+    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
+    <!--[if lt IE 9]>
+      <script src="http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"></script>
+      <script src="http://cdn.bootcss.com/respond.js/1.4.2/respond.min.js"></script>
+    <![endif]-->
+  </head>
+<body>
+<script language="javascript" type="text/javascript"><!--
+output_list = Array();
+
+/* level - 0:Summary; 1:Failed; 2:All */
+function showCase(level) {
+    trs = document.getElementsByTagName("tr");
+    for (var i = 0; i < trs.length; i++) {
+        tr = trs[i];
+        id = tr.id;
+        if (id.substr(0,2) == 'ft') {
+            if (level < 1) {
+                tr.className = 'hiddenRow';
+            }
+            else {
+                tr.className = '';
+            }
+        }
+        if (id.substr(0,2) == 'pt') {
+            if (level > 1) {
+                tr.className = '';
+            }
+            else {
+                tr.className = 'hiddenRow';
+            }
+        }
+    }
+}
+
+
+function showClassDetail(cid, count) {
+    var id_list = Array(count);
+    var toHide = 1;
+    for (var i = 0; i < count; i++) {
+        tid0 = 't' + cid.substr(1) + '.' + (i+1);
+        tid = 'f' + tid0;
+        tr = document.getElementById(tid);
+        if (!tr) {
+            tid = 'p' + tid0;
+            tr = document.getElementById(tid);
+        }
+        id_list[i] = tid;
+        if (tr.className) {
+            toHide = 0;
+        }
+    }
+    for (var i = 0; i < count; i++) {
+        tid = id_list[i];
+        if (toHide) {
+            document.getElementById('div_'+tid).style.display = 'none'
+            document.getElementById(tid).className = 'hiddenRow';
+        }
+        else {
+            document.getElementById(tid).className = '';
+        }
+    }
+}
+
+
+function showTestDetail(div_id){
+    var details_div = document.getElementById(div_id)
+    var displayState = details_div.style.display
+    // alert(displayState)
+    if (displayState != 'block' ) {
+        displayState = 'block'
+        details_div.style.display = 'block'
+    }
+    else {
+        details_div.style.display = 'none'
+    }
+}
+
+
+function html_escape(s) {
+    s = s.replace(/&/g,'&amp;');
+    s = s.replace(/</g,'&lt;');
+    s = s.replace(/>/g,'&gt;');
+    return s;
+}
+
+/* obsoleted by detail in <div>
+function showOutput(id, name) {
+    var w = window.open("", //url
+                    name,
+                    "resizable,scrollbars,status,width=800,height=450");
+    d = w.document;
+    d.write("<pre>");
+    d.write(html_escape(output_list[id]));
+    d.write("\n");
+    d.write("<a href='javascript:window.close()'>close</a>\n");
+    d.write("</pre>\n");
+    d.close();
+}
+*/
+--></script>
+
+<div class="container">
+    <div class='heading'>
+<h1>自动化测试报告</h1>
+<p><strong>Start Time:</strong> 2018-03-24 18:43:52</p>
+<p><strong>Duration:</strong> 0:02:23.875229</p>
+<p><strong>Status:</strong> <span class="text text-warning">Error <strong>13</strong></span></p>
+
+<p class='description'>测试结果</p>
+</div>
+
+
+    
+<p id='show_detail_line'>
+<span class="label label-primary" onclick="showCase(0)">Summary</span>
+<span class="label label-danger" onclick="showCase(1)">Failed</span>
+<span class="label label-default" onclick="showCase(2)">All</span>
+</p>
+<table id='result_table' class="table">
+    <thead>
+        <tr id='header_row'>
+            <th>Test Group/Test case</td>
+            <th>Count</td>
+            <th>Pass</td>
+            <th>Fail</td>
+            <th>Error</td>
+            <th>View</td>
+        </tr>
+    </thead>
+    <tbody>
+        
+<tr class='text text-warning'>
+    <td>login_test.Testlogin</td>
+    <td>3</td>
+    <td>0</td>
+    <td>0</td>
+    <td>3</td>
+    <td><a class="btn btn-xs btn-primary"href="javascript:showClassDetail('c1',3)">Detail</a></td>
+</tr>
+
+<tr id='ft1.1' class='none'>
+    <td class='text text-warning'><div class='case'>test_login1_1</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft1.1')" >
+        error</a>
+
+    <div id='div_ft1.1' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft1.1').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft1.1: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\login_test.py", line 14, in setUp
+    self.login_fun=Login_tes(self.derve)
+  File "C:\Users\Administrator\Desktop\python-selenium\bussinses\funnicgong.py", line 18, in __init__
+    self.driber.get(self.lo_url)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 324, in get
+    self.execute(Command.GET, {'url': url})
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 312, in execute
+    self.error_handler.check_response(response)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 237, in check_response
+    raise exception_class(message, screen, stacktrace)
+selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&amp;u=http%3A//127.0.0.1%3A8000/&amp;c=UTF-8&amp;f=regular&amp;d=Firefox%20%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%88%B0%20127.0.0.1%3A8000%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82
+
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr id='ft1.2' class='none'>
+    <td class='text text-warning'><div class='case'>test_login1_2</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft1.2')" >
+        error</a>
+
+    <div id='div_ft1.2' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft1.2').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft1.2: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\login_test.py", line 14, in setUp
+    self.login_fun=Login_tes(self.derve)
+  File "C:\Users\Administrator\Desktop\python-selenium\bussinses\funnicgong.py", line 18, in __init__
+    self.driber.get(self.lo_url)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 324, in get
+    self.execute(Command.GET, {'url': url})
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 312, in execute
+    self.error_handler.check_response(response)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 237, in check_response
+    raise exception_class(message, screen, stacktrace)
+selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&amp;u=http%3A//127.0.0.1%3A8000/&amp;c=UTF-8&amp;f=regular&amp;d=Firefox%20%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%88%B0%20127.0.0.1%3A8000%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82
+
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr id='ft1.3' class='none'>
+    <td class='text text-warning'><div class='case'>test_login1_3</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft1.3')" >
+        error</a>
+
+    <div id='div_ft1.3' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft1.3').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft1.3: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\login_test.py", line 14, in setUp
+    self.login_fun=Login_tes(self.derve)
+  File "C:\Users\Administrator\Desktop\python-selenium\bussinses\funnicgong.py", line 18, in __init__
+    self.driber.get(self.lo_url)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 324, in get
+    self.execute(Command.GET, {'url': url})
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 312, in execute
+    self.error_handler.check_response(response)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 237, in check_response
+    raise exception_class(message, screen, stacktrace)
+selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&amp;u=http%3A//127.0.0.1%3A8000/&amp;c=UTF-8&amp;f=regular&amp;d=Firefox%20%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%88%B0%20127.0.0.1%3A8000%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82
+
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr class='text text-warning'>
+    <td>xiugai_test.Test_xiugai</td>
+    <td>3</td>
+    <td>0</td>
+    <td>0</td>
+    <td>3</td>
+    <td><a class="btn btn-xs btn-primary"href="javascript:showClassDetail('c2',3)">Detail</a></td>
+</tr>
+
+<tr id='ft2.1' class='none'>
+    <td class='text text-warning'><div class='case'>test_xiugai_1_1</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft2.1')" >
+        error</a>
+
+    <div id='div_ft2.1' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft2.1').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft2.1: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\xiugai_test.py", line 15, in setUp
+    self.derve=webdriver.Fi()
+AttributeError: module 'selenium.webdriver' has no attribute 'Fi'
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr id='ft2.2' class='none'>
+    <td class='text text-warning'><div class='case'>test_xiugai_1_2</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft2.2')" >
+        error</a>
+
+    <div id='div_ft2.2' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft2.2').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft2.2: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\xiugai_test.py", line 15, in setUp
+    self.derve=webdriver.Fi()
+AttributeError: module 'selenium.webdriver' has no attribute 'Fi'
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr id='ft2.3' class='none'>
+    <td class='text text-warning'><div class='case'>test_xiugai_1_3</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft2.3')" >
+        error</a>
+
+    <div id='div_ft2.3' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft2.3').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft2.3: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\xiugai_test.py", line 15, in setUp
+    self.derve=webdriver.Fi()
+AttributeError: module 'selenium.webdriver' has no attribute 'Fi'
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr class='text text-warning'>
+    <td>zhaohui_test.Testzhaohui</td>
+    <td>3</td>
+    <td>0</td>
+    <td>0</td>
+    <td>3</td>
+    <td><a class="btn btn-xs btn-primary"href="javascript:showClassDetail('c3',3)">Detail</a></td>
+</tr>
+
+<tr id='ft3.1' class='none'>
+    <td class='text text-warning'><div class='case'>test_zhaohui_1_1</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft3.1')" >
+        error</a>
+
+    <div id='div_ft3.1' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft3.1').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft3.1: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\zhaohui_test.py", line 16, in setUp
+    self.zhaohui_fun=Zaohui_tes(self.derve)
+  File "C:\Users\Administrator\Desktop\python-selenium\bussinses\funnicgong.py", line 91, in __init__
+    self.driver.get(self.zhao_url)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 324, in get
+    self.execute(Command.GET, {'url': url})
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 312, in execute
+    self.error_handler.check_response(response)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 237, in check_response
+    raise exception_class(message, screen, stacktrace)
+selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&amp;u=http%3A//127.0.0.1%3A8000/reset_pwd&amp;c=UTF-8&amp;f=regular&amp;d=Firefox%20%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%88%B0%20127.0.0.1%3A8000%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82
+
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr id='ft3.2' class='none'>
+    <td class='text text-warning'><div class='case'>test_zhaohui_1_2</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft3.2')" >
+        error</a>
+
+    <div id='div_ft3.2' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft3.2').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft3.2: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\zhaohui_test.py", line 16, in setUp
+    self.zhaohui_fun=Zaohui_tes(self.derve)
+  File "C:\Users\Administrator\Desktop\python-selenium\bussinses\funnicgong.py", line 91, in __init__
+    self.driver.get(self.zhao_url)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 324, in get
+    self.execute(Command.GET, {'url': url})
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 312, in execute
+    self.error_handler.check_response(response)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 237, in check_response
+    raise exception_class(message, screen, stacktrace)
+selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&amp;u=http%3A//127.0.0.1%3A8000/reset_pwd&amp;c=UTF-8&amp;f=regular&amp;d=Firefox%20%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%88%B0%20127.0.0.1%3A8000%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82
+
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr id='ft3.3' class='none'>
+    <td class='text text-warning'><div class='case'>test_zhaohui_1_3</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft3.3')" >
+        error</a>
+
+    <div id='div_ft3.3' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft3.3').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft3.3: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\zhaohui_test.py", line 16, in setUp
+    self.zhaohui_fun=Zaohui_tes(self.derve)
+  File "C:\Users\Administrator\Desktop\python-selenium\bussinses\funnicgong.py", line 91, in __init__
+    self.driver.get(self.zhao_url)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 324, in get
+    self.execute(Command.GET, {'url': url})
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 312, in execute
+    self.error_handler.check_response(response)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 237, in check_response
+    raise exception_class(message, screen, stacktrace)
+selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&amp;u=http%3A//127.0.0.1%3A8000/reset_pwd&amp;c=UTF-8&amp;f=regular&amp;d=Firefox%20%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%88%B0%20127.0.0.1%3A8000%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82
+
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr class='text text-warning'>
+    <td>zhuce_test.Testzhuce</td>
+    <td>4</td>
+    <td>0</td>
+    <td>0</td>
+    <td>4</td>
+    <td><a class="btn btn-xs btn-primary"href="javascript:showClassDetail('c4',4)">Detail</a></td>
+</tr>
+
+<tr id='ft4.1' class='none'>
+    <td class='text text-warning'><div class='case'>test_zhuce_1_1</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft4.1')" >
+        error</a>
+
+    <div id='div_ft4.1' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft4.1').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft4.1: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\zhuce_test.py", line 16, in setUp
+    self.zhuce_fun=Zhuce_tes(self.derve)
+  File "C:\Users\Administrator\Desktop\python-selenium\bussinses\funnicgong.py", line 54, in __init__
+    self.deriver.get(self.zhu_url)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 324, in get
+    self.execute(Command.GET, {'url': url})
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 312, in execute
+    self.error_handler.check_response(response)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 237, in check_response
+    raise exception_class(message, screen, stacktrace)
+selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&amp;u=http%3A//127.0.0.1%3A8000/&amp;c=UTF-8&amp;f=regular&amp;d=Firefox%20%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%88%B0%20127.0.0.1%3A8000%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82
+
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr id='ft4.2' class='none'>
+    <td class='text text-warning'><div class='case'>test_zhuce_1_2</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft4.2')" >
+        error</a>
+
+    <div id='div_ft4.2' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft4.2').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft4.2: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\zhuce_test.py", line 16, in setUp
+    self.zhuce_fun=Zhuce_tes(self.derve)
+  File "C:\Users\Administrator\Desktop\python-selenium\bussinses\funnicgong.py", line 54, in __init__
+    self.deriver.get(self.zhu_url)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 324, in get
+    self.execute(Command.GET, {'url': url})
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 312, in execute
+    self.error_handler.check_response(response)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 237, in check_response
+    raise exception_class(message, screen, stacktrace)
+selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&amp;u=http%3A//127.0.0.1%3A8000/&amp;c=UTF-8&amp;f=regular&amp;d=Firefox%20%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%88%B0%20127.0.0.1%3A8000%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82
+
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr id='ft4.3' class='none'>
+    <td class='text text-warning'><div class='case'>test_zhuce_1_3</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft4.3')" >
+        error</a>
+
+    <div id='div_ft4.3' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft4.3').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft4.3: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\zhuce_test.py", line 16, in setUp
+    self.zhuce_fun=Zhuce_tes(self.derve)
+  File "C:\Users\Administrator\Desktop\python-selenium\bussinses\funnicgong.py", line 54, in __init__
+    self.deriver.get(self.zhu_url)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 324, in get
+    self.execute(Command.GET, {'url': url})
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 312, in execute
+    self.error_handler.check_response(response)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 237, in check_response
+    raise exception_class(message, screen, stacktrace)
+selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&amp;u=http%3A//127.0.0.1%3A8000/&amp;c=UTF-8&amp;f=regular&amp;d=Firefox%20%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%88%B0%20127.0.0.1%3A8000%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82
+
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+<tr id='ft4.4' class='none'>
+    <td class='text text-warning'><div class='case'>test_zhuce_1_4</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_ft4.4')" >
+        error</a>
+
+    <div id='div_ft4.4' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_ft4.4').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        
+ft4.4: Traceback (most recent call last):
+  File "C:\Users\Administrator\Desktop\python-selenium\case\zhuce_test.py", line 16, in setUp
+    self.zhuce_fun=Zhuce_tes(self.derve)
+  File "C:\Users\Administrator\Desktop\python-selenium\bussinses\funnicgong.py", line 54, in __init__
+    self.deriver.get(self.zhu_url)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 324, in get
+    self.execute(Command.GET, {'url': url})
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\webdriver.py", line 312, in execute
+    self.error_handler.check_response(response)
+  File "C:\Users\Administrator\AppData\Local\Programs\Python\Python36\lib\site-packages\selenium\webdriver\remote\errorhandler.py", line 237, in check_response
+    raise exception_class(message, screen, stacktrace)
+selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&amp;u=http%3A//127.0.0.1%3A8000/&amp;c=UTF-8&amp;f=regular&amp;d=Firefox%20%E6%97%A0%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%88%B0%20127.0.0.1%3A8000%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E3%80%82
+
+
+
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+
+    </tbody>
+    <tfoot>
+        <tr id='total_row'>
+            <td>Total</td>
+            <td>13</td>
+            <td class="text text-success">0</td>
+            <td class="text text-danger">0</td>
+            <td class="text text-warning">13</td>
+            <td>&nbsp;</td>
+        </tr>
+    </tfoot>
+</table>
+
+    <div id='ending'>&nbsp;</div>
+</div>
+
+</body>
+</html>
Index: python-selenium-master/suite/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/suite/__init__.py b/python-selenium-master/suite/__init__.py
new file mode 100644
--- /dev/null	(date 1662812104527)
+++ b/python-selenium-master/suite/__init__.py	(date 1662812104527)
@@ -0,0 +1,6 @@
+# encoding: utf-8  
+""" 
+@author: lileilei 
+@file: __init__.py.py 
+@time: 2018/1/21 11:49 
+""" 
\ No newline at end of file
Index: python-selenium-master/suite/testsuite.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/suite/testsuite.py b/python-selenium-master/suite/testsuite.py
new file mode 100644
--- /dev/null	(date 1662812104584)
+++ b/python-selenium-master/suite/testsuite.py	(date 1662812104584)
@@ -0,0 +1,16 @@
+import  unittest,time,os
+from util import BSTestRunner
+from config import description,reporttitle
+path=os.getcwd()
+case_path=path+'\\case'
+def create_report():
+    test_suit = unittest.TestSuite()
+    discover = unittest.defaultTestLoader.discover(case_path, pattern='*test.py', top_level_dir=None)
+    for test in discover:
+        for test_case in test:
+            test_suit.addTest(test_case)
+    now=time.strftime('%Y-%m-%d_%H_%M',time.localtime(time.time()))
+    report_dir=path+'\\report\\%s.html'%now
+    re_open= open(report_dir,'wb')
+    runner=BSTestRunner.BSTestRunner(stream=re_open,title=reporttitle,description=description)
+    runner.run(test_suit)
Index: python-selenium-master/.idea/python-selenium-master.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/.idea/python-selenium-master.iml b/python-selenium-master/.idea/python-selenium-master.iml
new file mode 100644
--- /dev/null	(date 1662812146144)
+++ b/python-selenium-master/.idea/python-selenium-master.iml	(date 1662812146144)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: python-selenium-master/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/.idea/modules.xml b/python-selenium-master/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1662812129216)
+++ b/python-selenium-master/.idea/modules.xml	(date 1662812129216)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/python-selenium-master.iml" filepath="$PROJECT_DIR$/.idea/python-selenium-master.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: python-selenium-master/util/selse_feng.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/util/selse_feng.py b/python-selenium-master/util/selse_feng.py
new file mode 100644
--- /dev/null	(date 1662812104900)
+++ b/python-selenium-master/util/selse_feng.py	(date 1662812104900)
@@ -0,0 +1,151 @@
+from selenium import webdriver
+from selenium.webdriver.support.ui import WebDriverWait
+from selenium.webdriver.common.by import By
+from selenium.webdriver.support import expected_conditions as EC
+from selenium.webdriver.common.action_chains import ActionChains
+class PySele():
+	def __init__(self,brower):#初始化浏览器
+		if brower =='firefox' or brower =='Firefox' or brower =='f' or brower =='F':
+			deriver=webdriver.Firefox()
+		elif brower =='Ie' or brower =='ie' or brower =='i' or brower=='I':
+			deriver=webdriver.Ie()
+		elif brower =='Chrome' or brower =='chrome' or brower =='Ch' or brower=='ch':
+			deriver=webdriver.Chrome()
+		elif brower =='PhantomJS' or brower =='phantomjs' or brower =='ph' or brower=='phjs':
+			deriver=webdriver.PhantomJS()
+		elif brower =='Edge' or brower =='edge' or brower =='Ed' or brower=='ed':
+			deriver=webdriver.Edge()
+		elif brower =='Opera' or brower =='opera' or brower =='op' or brower=='OP':
+			deriver=webdriver.Opera()
+		elif brower =='Safari' or brower =='safari' or brower =='sa' or brower=='saf':
+			deriver=webdriver.Safari()
+		else:
+			raise NameError('只能输入firefox,Ie,Chrome,PhantomJS,Edge,Opera,Safari')
+		self.driver=deriver
+	def element(self,fangfa,dingwei):#定位
+		if fangfa=='id':
+			element=self.driver.find_element_by_id(dingwei)
+		elif fangfa == "name":
+			element = self.driver.find_element_by_name(dingwei)
+		elif fangfa == "class":
+			element = self.driver.find_element_by_class_name(dingwei)
+		elif fangfa == "link_text":
+			element = self.driver.find_element_by_link_text(dingwei)
+		elif fangfa == "xpath":
+			element = self.driver.find_element_by_xpath(dingwei)
+		elif fangfa == "tag":
+			element = self.driver.find_element_by_tag_name(dingwei)
+		elif fangfa == "css":
+			element = self.driver.find_element_by_css_selector(dingwei)
+		else:
+			raise NameError("Please enter the  elements,'id','name','class','link_text','xpath','css','tag'.")
+		return element
+	def elements(self,fangfa,dingwei):#组定位
+		if fangfa=='id':
+			element=self.driver.find_elements_by_id(dingwei)
+		elif fangfa == "name":
+			element = self.driver.find_elements_by_name(dingwei)
+		elif fangfa == "class":
+			element = self.driver.find_elements_by_class_name(dingwei)
+		elif fangfa == "link_text":
+			element = self.driver.find_elements_by_link_text(dingwei)
+		elif fangfa == "xpath":
+			element = self.driver.find_elements_by_xpath(dingwei)
+		elif fangfa == "tag":
+			element = self.driver.find_elements_by_tag_name(dingwei)
+		elif fangfa == "css":
+			element = self.driver.find_elements_by_css_selector(dingwei)
+		else:
+			raise NameError("Please enter the  elements,'id','name','class','link_text','xpath','css','tag'.")
+		return element
+	def element_wait(self,fangfa,dingwei,wati=6):#等待
+		if fangfa == "id":
+			WebDriverWait(self.driver,wati,1).until(EC.presence_of_element_located((By.ID, dingwei)))
+		elif fangfa == "name":
+			WebDriverWait(self.driver,wati,1).until(EC.presence_of_element_located((By.NAME, dingwei)))
+		elif fangfa == "class":
+			WebDriverWait(self.driver,wati,1).until(EC.presence_of_element_located((By.CLASS_NAME, dingwei)))
+		elif fangfa == "link_text":
+			WebDriverWait(self.driver,wati,1).until(EC.presence_of_element_located((By.LINK_TEXT, dingwei)))
+		elif fangfa == "xpath":
+			WebDriverWait(self.driver,wati,1).until(EC.presence_of_element_located((By.XPATH, dingwei)))
+		elif fangfa == "css":
+			WebDriverWait(self.driver,wati,1).until(EC.presence_of_element_located((By.CSS_SELECTOR, dingwei)))
+		else:
+			raise NameError("Please enter the  elements,'id','name','class','link_text','xpath','css'.")
+	def open(self,url):#打开网页
+		self.driver.get(url)
+	def make_maxwindow(self):#最大化浏览器
+		self.driver.maximize_window()
+	def set_winsize(self,wide,hight):#设置窗口
+		self.driver.set_window_size(wide,hight)
+	def send_key(self,fangfa,dingwei,text):#发送内容
+		self.element(fangfa,dingwei)
+		e1=self.element(fangfa,dingwei)
+		e1.clear()
+		e1.send_keys(text)
+	def clear(self,fangfa,dingwei):#清空
+		self.element_wait(fangfa,dingwei)
+		e1=self.element(fangfa,dingwei)
+		e1.clear()
+	def clic(self,fangfa,dingwei):#单击
+		self.element_wait(fangfa,dingwei)
+		e1=self.element(fangfa,dingwei)
+		e1.click()
+	def right_click(self,fangfa,dingwei):#右击
+		self.element_wait(fangfa,dingwei)
+		e1=self.element(fangfa,dingwei)
+		ActionChains(self.driver).context_click(e1).perform()
+	def move_element(self,fangfa,dingwei):#移动到
+		self.element_wait(fangfa,dingwei)
+		e1=self.element(fangfa,dingwei)
+		ActionChains(self.driver).move_to_element(e1).perform()
+	def double_click(self,dingwei,fangfa):#双击
+		self.element_wait(fangfa,dingwei)
+		e1=self.element(fangfa,dingwei)
+		ActionChains(self.driver).double_click(e1).perform()
+	def  drag_and_drop(self,fangfa1,e1,fangfa2,e2):#从e1到e2
+		self.element_wait(fangfa1,e1)
+		eme1=self.element(fangfa1,e1)
+		self.element_wait(fangfa2,e2)
+		eme2=self.element(fangfa2,e2)
+		ActionChains(self.driver).drag_and_drop(eme1,eme2).perform()
+	def click_text(self,text):#点击文字
+		self.driver.find_element_by_link_text(text).click()
+	def close(self):#关闭
+		self.driver.close()
+	def kill(self):#退出
+		self.driver.quit()
+	def sublimit(self,fangfa,dingwei):#提交
+		self.element_wait(fangfa,dingwei)
+		e1=self.element(fangfa,dingwei)
+		e1.sublimit()
+	def f5(self):#刷新
+		self.driver.refresh()
+	def js(self,sprit):#执行js
+		self.driver.execute_script(sprit)
+	def get_attribute(self, fangfa,dingwei, attribute):
+		e1=self.element(fangfa,dingwei)
+		return e1.get_attribute(attribute)
+	def get_text(self,fangfa,dingwei):
+		self.element_wait(fangfa,dingwei)
+		e1=self.element(fangfa,dingwei)
+		return e1.text
+	def get_is_dis(self,fangfa,dingwei):
+		self.element_wait(fangfa,dingwei)
+		e1=self.element(fangfa,dingwei)
+		return e1.is_displayed()
+	def get_title(self,fangfa,dingwei):#获取title
+		return self.driver.title
+	def get_screen(self,file_path):#截屏
+		self.driver.get_screenshot_as_file(file_path)
+	def wait(self,fangfa,dingwei):#等待
+		self.driver.implicitly_wait((fangfa,dingwei))
+	def accpet(self):#允许
+		self.driver.switch_to.alert.accept()
+	def dismiss_alert(self):
+		self.driver.switch_to.alert.dismiss()
+	def switch_to_frame(self, fangfa,dingwei):#切换
+		self.element_wait(fangfa,dingwei)
+		if1=self.element(fangfa,dingwei)
+		self.driver.switch_to.frame(if1)
\ No newline at end of file
Index: python-selenium-master/util/log.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/util/log.py b/python-selenium-master/util/log.py
new file mode 100644
--- /dev/null	(date 1662812104853)
+++ b/python-selenium-master/util/log.py	(date 1662812104853)
@@ -0,0 +1,28 @@
+import os,time,logging
+path=os.getcwd()
+class log_message():
+	def __init__(self):
+		title = u'注册测试'
+		day = time.strftime("%Y%m%d%H", time.localtime(time.time()))
+		pad = os.getcwd()
+		file_dir = pad + '\\logco'
+		file = os.path.join(file_dir, (day + '.log'))
+		self.logger = logging.Logger(title)
+		self.logger.setLevel(logging.INFO)
+		self.logfile = logging.FileHandler(file)
+		self.logfile.setLevel(logging.INFO)
+		self.control = logging.StreamHandler()
+		self.control.setLevel(logging.INFO)
+		self.formater = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
+		self.logfile.setFormatter(self.formater)
+		self.control.setFormatter(self.formater)
+		self.logger.addHandler(self.logfile)
+		self.logger.addHandler(self.control)
+	def debugInfo(self, message):
+		self.logger.debug(message)
+	def info_log(self, message):
+		self.logger.info(message)
+	def ware_log(self, message):
+		self.logger.warn(message)
+	def error_log(self, message):
+		self.logger.error(message)
\ No newline at end of file
Index: python-selenium-master/util/HTMLTestRunner.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/util/HTMLTestRunner.py b/python-selenium-master/util/HTMLTestRunner.py
new file mode 100644
--- /dev/null	(date 1662812104751)
+++ b/python-selenium-master/util/HTMLTestRunner.py	(date 1662812104751)
@@ -0,0 +1,827 @@
+"""
+A TestRunner for use with the Python unit testing framework. It
+generates a HTML report to show the result at a glance.
+
+The simplest way to use this is to invoke its main method. E.g.
+
+    import unittest
+    import HTMLTestRunner
+
+    ... define your tests ...
+
+    if __name__ == '__main__':
+        HTMLTestRunner.main()
+
+
+For more customization options, instantiates a HTMLTestRunner object.
+HTMLTestRunner is a counterpart to unittest's TextTestRunner. E.g.
+
+    # output to a file
+    fp = file('my_report.html', 'wb')
+    runner = HTMLTestRunner.HTMLTestRunner(
+                stream=fp,
+                title='My unit test',
+                description='This demonstrates the report output by HTMLTestRunner.'
+                )
+
+    # Use an external stylesheet.
+    # See the Template_mixin class for more customizable options
+    runner.STYLESHEET_TMPL = '<link rel="stylesheet" href="my_stylesheet.css" type="text/css">'
+
+    # run the test
+    runner.run(my_test_suite)
+
+
+------------------------------------------------------------------------
+Copyright (c) 2004-2007, Wai Yip Tung
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are
+met:
+
+* Redistributions of source code must retain the above copyright notice,
+  this list of conditions and the following disclaimer.
+* Redistributions in binary form must reproduce the above copyright
+  notice, this list of conditions and the following disclaimer in the
+  documentation and/or other materials provided with the distribution.
+* Neither the name Wai Yip Tung nor the names of its contributors may be
+  used to endorse or promote products derived from this software without
+  specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
+IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
+OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+"""
+
+# URL: http://tungwaiyip.info/software/HTMLTestRunner.html
+
+__author__ = "Wai Yip Tung"
+__version__ = "0.8.2"
+
+
+"""
+Change History
+
+Version 0.8.2
+* Show output inline instead of popup window (Viorel Lupu).
+
+Version in 0.8.1
+* Validated XHTML (Wolfgang Borgert).
+* Added description of test classes and test cases.
+
+Version in 0.8.0
+* Define Template_mixin class for customization.
+* Workaround a IE 6 bug that it does not treat <script> block as CDATA.
+
+Version in 0.7.1
+* Back port to Python 2.3 (Frank Horowitz).
+* Fix missing scroll bars in detail log (Podi).
+"""
+
+# TODO: color stderr
+# TODO: simplify javascript using ,ore than 1 class in the class attribute?
+
+import datetime
+import io
+import sys
+import time
+import unittest
+from xml.sax import saxutils
+
+
+# ------------------------------------------------------------------------
+# The redirectors below are used to capture output during testing. Output
+# sent to sys.stdout and sys.stderr are automatically captured. However
+# in some cases sys.stdout is already cached before HTMLTestRunner is
+# invoked (e.g. calling logging.basicConfig). In order to capture those
+# output, use the redirectors for the cached stream.
+#
+# e.g.
+#   >>> logging.basicConfig(stream=HTMLTestRunner.stdout_redirector)
+#   >>>
+
+class OutputRedirector(object):
+    """ Wrapper to redirect stdout or stderr """
+    def __init__(self, fp):
+        self.fp = fp
+
+    def write(self, s):
+        self.fp.write(s)
+
+    def writelines(self, lines):
+        self.fp.writelines(lines)
+
+    def flush(self):
+        self.fp.flush()
+
+stdout_redirector = OutputRedirector(sys.stdout)
+stderr_redirector = OutputRedirector(sys.stderr)
+
+
+
+# ----------------------------------------------------------------------
+# Template
+
+class Template_mixin(object):
+    """
+    Define a HTML template for report customerization and generation.
+
+    Overall structure of an HTML report
+
+    HTML
+    +------------------------+
+    |<html>                  |
+    |  <head>                |
+    |                        |
+    |   STYLESHEET           |
+    |   +----------------+   |
+    |   |                |   |
+    |   +----------------+   |
+    |                        |
+    |  </head>               |
+    |                        |
+    |  <body>                |
+    |                        |
+    |   HEADING              |
+    |   +----------------+   |
+    |   |                |   |
+    |   +----------------+   |
+    |                        |
+    |   REPORT               |
+    |   +----------------+   |
+    |   |                |   |
+    |   +----------------+   |
+    |                        |
+    |   ENDING               |
+    |   +----------------+   |
+    |   |                |   |
+    |   +----------------+   |
+    |                        |
+    |  </body>               |
+    |</html>                 |
+    +------------------------+
+    """
+
+    STATUS = {
+    0: 'pass',
+    1: 'fail',
+    2: 'error',
+    }
+
+    DEFAULT_TITLE = 'Unit Test Report'
+    DEFAULT_DESCRIPTION = ''
+
+    # ------------------------------------------------------------------------
+    # HTML Template
+
+    HTML_TMPL = r"""<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+    <title>%(title)s</title>
+    <meta name="generator" content="%(generator)s"/>
+    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+    %(stylesheet)s
+</head>
+<body>
+<script language="javascript" type="text/javascript"><!--
+output_list = Array();
+
+/* level - 0:Summary; 1:Failed; 2:All */
+function showCase(level) {
+    trs = document.getElementsByTagName("tr");
+    for (var i = 0; i < trs.length; i++) {
+        tr = trs[i];
+        id = tr.id;
+        if (id.substr(0,2) == 'ft') {
+            if (level < 1) {
+                tr.className = 'hiddenRow';
+            }
+            else {
+                tr.className = '';
+            }
+        }
+        if (id.substr(0,2) == 'pt') {
+            if (level > 1) {
+                tr.className = '';
+            }
+            else {
+                tr.className = 'hiddenRow';
+            }
+        }
+    }
+}
+
+
+function showClassDetail(cid, count) {
+    var id_list = Array(count);
+    var toHide = 1;
+    for (var i = 0; i < count; i++) {
+        tid0 = 't' + cid.substr(1) + '.' + (i+1);
+        tid = 'f' + tid0;
+        tr = document.getElementById(tid);
+        if (!tr) {
+            tid = 'p' + tid0;
+            tr = document.getElementById(tid);
+        }
+        id_list[i] = tid;
+        if (tr.className) {
+            toHide = 0;
+        }
+    }
+    for (var i = 0; i < count; i++) {
+        tid = id_list[i];
+        if (toHide) {
+            document.getElementById('div_'+tid).style.display = 'none'
+            document.getElementById(tid).className = 'hiddenRow';
+        }
+        else {
+            document.getElementById(tid).className = '';
+        }
+    }
+}
+
+
+function showTestDetail(div_id){
+    var details_div = document.getElementById(div_id)
+    var displayState = details_div.style.display
+    // alert(displayState)
+    if (displayState != 'block' ) {
+        displayState = 'block'
+        details_div.style.display = 'block'
+    }
+    else {
+        details_div.style.display = 'none'
+    }
+}
+
+
+function html_escape(s) {
+    s = s.replace(/&/g,'&amp;');
+    s = s.replace(/</g,'&lt;');
+    s = s.replace(/>/g,'&gt;');
+    return s;
+}
+
+/* obsoleted by detail in <div>
+function showOutput(id, name) {
+    var w = window.open("", //url
+                    name,
+                    "resizable,scrollbars,status,width=800,height=450");
+    d = w.document;
+    d.write("<pre>");
+    d.write(html_escape(output_list[id]));
+    d.write("\n");
+    d.write("<a href='javascript:window.close()'>close</a>\n");
+    d.write("</pre>\n");
+    d.close();
+}
+*/
+--></script>
+
+%(heading)s
+%(report)s
+%(ending)s
+
+</body>
+</html>
+"""
+    # variables: (title, generator, stylesheet, heading, report, ending)
+
+
+    # ------------------------------------------------------------------------
+    # Stylesheet
+    #
+    # alternatively use a <link> for external style sheet, e.g.
+    #   <link rel="stylesheet" href="$url" type="text/css">
+
+    STYLESHEET_TMPL = """
+<style type="text/css" media="screen">
+body        { font-family: verdana, arial, helvetica, sans-serif; font-size: 80%; }
+table       { font-size: 100%; }
+pre         { }
+
+/* -- heading ---------------------------------------------------------------------- */
+h1 {
+	font-size: 16pt;
+	color: gray;
+}
+.heading {
+    margin-top: 0ex;
+    margin-bottom: 1ex;
+}
+
+.heading .attribute {
+    margin-top: 1ex;
+    margin-bottom: 0;
+}
+
+.heading .description {
+    margin-top: 4ex;
+    margin-bottom: 6ex;
+}
+
+/* -- css div popup ------------------------------------------------------------------------ */
+a.popup_link {
+}
+
+a.popup_link:hover {
+    color: red;
+}
+
+.popup_window {
+    display: none;
+    position: relative;
+    left: 0px;
+    top: 0px;
+    /*border: solid #627173 1px; */
+    padding: 10px;
+    background-color: #E6E6D6;
+    font-family: "Lucida Console", "Courier New", Courier, monospace;
+    text-align: left;
+    font-size: 8pt;
+    width: 500px;
+}
+
+}
+/* -- report ------------------------------------------------------------------------ */
+#show_detail_line {
+    margin-top: 3ex;
+    margin-bottom: 1ex;
+}
+#result_table {
+    width: 80%;
+    border-collapse: collapse;
+    border: 1px solid #777;
+}
+#header_row {
+    font-weight: bold;
+    color: white;
+    background-color: #777;
+}
+#result_table td {
+    border: 1px solid #777;
+    padding: 2px;
+}
+#total_row  { font-weight: bold; }
+.passClass  { background-color: #6c6; }
+.failClass  { background-color: #c60; }
+.errorClass { background-color: #c00; }
+.passCase   { color: #6c6; }
+.failCase   { color: #c60; font-weight: bold; }
+.errorCase  { color: #c00; font-weight: bold; }
+.hiddenRow  { display: none; }
+.case   { margin-left: 2em; }
+
+
+/* -- ending ---------------------------------------------------------------------- */
+#ending {
+}
+
+</style>
+"""
+
+
+
+    # ------------------------------------------------------------------------
+    # Heading
+    #
+
+    HEADING_TMPL = """<div class='heading'>
+<h1>%(title)s</h1>
+%(parameters)s
+<p class='description'>%(description)s</p>
+</div>
+
+""" # variables: (title, parameters, description)
+
+    HEADING_ATTRIBUTE_TMPL = """<p class='attribute'><strong>%(name)s:</strong> %(value)s</p>
+""" # variables: (name, value)
+
+
+
+    # ------------------------------------------------------------------------
+    # Report
+    #
+
+    REPORT_TMPL = """
+<p id='show_detail_line'>Show
+<a href='javascript:showCase(0)'>Summary</a>
+<a href='javascript:showCase(1)'>Failed</a>
+<a href='javascript:showCase(2)'>All</a>
+</p>
+<table id='result_table'>
+<colgroup>
+<col align='left' />
+<col align='right' />
+<col align='right' />
+<col align='right' />
+<col align='right' />
+<col align='right' />
+</colgroup>
+<tr id='header_row'>
+    <td>Test Group/Test case</td>
+    <td>Count</td>
+    <td>Pass</td>
+    <td>Fail</td>
+    <td>Error</td>
+    <td>View</td>
+</tr>
+%(test_list)s
+<tr id='total_row'>
+    <td>Total</td>
+    <td>%(count)s</td>
+    <td>%(Pass)s</td>
+    <td>%(fail)s</td>
+    <td>%(error)s</td>
+    <td>&nbsp;</td>
+</tr>
+</table>
+""" # variables: (test_list, count, Pass, fail, error)
+
+    REPORT_CLASS_TMPL = r"""
+<tr class='%(style)s'>
+    <td>%(desc)s</td>
+    <td>%(count)s</td>
+    <td>%(Pass)s</td>
+    <td>%(fail)s</td>
+    <td>%(error)s</td>
+    <td><a href="javascript:showClassDetail('%(cid)s',%(count)s)">Detail</a></td>
+</tr>
+""" # variables: (style, desc, count, Pass, fail, error, cid)
+
+
+    REPORT_TEST_WITH_OUTPUT_TMPL = r"""
+<tr id='%(tid)s' class='%(Class)s'>
+    <td class='%(style)s'><div class='case'>%(desc)s</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link" onfocus='this.blur();' href="javascript:showTestDetail('div_%(tid)s')" >
+        %(status)s</a>
+
+    <div id='div_%(tid)s' class="popup_window">
+        <div style='text-align: right; color:red;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_%(tid)s').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        %(script)s
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+""" # variables: (tid, Class, style, desc, status)
+
+
+    REPORT_TEST_NO_OUTPUT_TMPL = r"""
+<tr id='%(tid)s' class='%(Class)s'>
+    <td class='%(style)s'><div class='case'>%(desc)s</div></td>
+    <td colspan='5' align='center'>%(status)s</td>
+</tr>
+""" # variables: (tid, Class, style, desc, status)
+
+
+    REPORT_TEST_OUTPUT_TMPL = r"""
+%(id)s: %(output)s
+""" # variables: (id, output)
+
+
+
+    # ------------------------------------------------------------------------
+    # ENDING
+    #
+
+    ENDING_TMPL = """<div id='ending'>&nbsp;</div>"""
+
+# -------------------- The end of the Template class -------------------
+
+
+TestResult = unittest.TestResult
+
+class _TestResult(TestResult):
+    # note: _TestResult is a pure representation of results.
+    # It lacks the output and reporting ability compares to unittest._TextTestResult.
+
+    def __init__(self, verbosity=1):
+        TestResult.__init__(self)
+        self.stdout0 = None
+        self.stderr0 = None
+        self.success_count = 0
+        self.failure_count = 0
+        self.error_count = 0
+        self.verbosity = verbosity
+
+        # result is a list of result in 4 tuple
+        # (
+        #   result code (0: success; 1: fail; 2: error),
+        #   TestCase object,
+        #   Test output (byte string),
+        #   stack trace,
+        # )
+        self.result = []
+
+
+    def startTest(self, test):
+        TestResult.startTest(self, test)
+        # just one buffer for both stdout and stderr
+        self.outputBuffer = io.StringIO()
+        stdout_redirector.fp = self.outputBuffer
+        stderr_redirector.fp = self.outputBuffer
+        self.stdout0 = sys.stdout
+        self.stderr0 = sys.stderr
+        sys.stdout = stdout_redirector
+        sys.stderr = stderr_redirector
+
+
+    def complete_output(self):
+        """
+        Disconnect output redirection and return buffer.
+        Safe to call multiple times.
+        """
+        if self.stdout0:
+            sys.stdout = self.stdout0
+            sys.stderr = self.stderr0
+            self.stdout0 = None
+            self.stderr0 = None
+        return self.outputBuffer.getvalue()
+
+
+    def stopTest(self, test):
+        # Usually one of addSuccess, addError or addFailure would have been called.
+        # But there are some path in unittest that would bypass this.
+        # We must disconnect stdout in stopTest(), which is guaranteed to be called.
+        self.complete_output()
+
+
+    def addSuccess(self, test):
+        self.success_count += 1
+        TestResult.addSuccess(self, test)
+        output = self.complete_output()
+        self.result.append((0, test, output, ''))
+        if self.verbosity > 1:
+            sys.stderr.write('ok ')
+            sys.stderr.write(str(test))
+            sys.stderr.write('\n')
+        else:
+            sys.stderr.write('.')
+
+    def addError(self, test, err):
+        self.error_count += 1
+        TestResult.addError(self, test, err)
+        _, _exc_str = self.errors[-1]
+        output = self.complete_output()
+        self.result.append((2, test, output, _exc_str))
+        if self.verbosity > 1:
+            sys.stderr.write('E  ')
+            sys.stderr.write(str(test))
+            sys.stderr.write('\n')
+        else:
+            sys.stderr.write('E')
+
+    def addFailure(self, test, err):
+        self.failure_count += 1
+        TestResult.addFailure(self, test, err)
+        _, _exc_str = self.failures[-1]
+        output = self.complete_output()
+        self.result.append((1, test, output, _exc_str))
+        if self.verbosity > 1:
+            sys.stderr.write('F  ')
+            sys.stderr.write(str(test))
+            sys.stderr.write('\n')
+        else:
+            sys.stderr.write('F')
+
+
+class HTMLTestRunner(Template_mixin):
+    """
+    """
+    def __init__(self, stream=sys.stdout, verbosity=1, title=None, description=None):
+        self.stream = stream
+        self.verbosity = verbosity
+        if title is None:
+            self.title = self.DEFAULT_TITLE
+        else:
+            self.title = title
+        if description is None:
+            self.description = self.DEFAULT_DESCRIPTION
+        else:
+            self.description = description
+
+        self.startTime = datetime.datetime.now()
+
+
+    def run(self, test):
+        "Run the given test case or test suite."
+        result = _TestResult(self.verbosity)
+        test(result)
+        self.stopTime = datetime.datetime.now()
+        self.generateReport(test, result)
+        # print >> sys.stderr, '\nTime Elapsed: %s' % (self.stopTime-self.startTime)
+        print(sys.stderr, '\nTime Elapsed: %s' % (self.stopTime-self.startTime))
+        return result
+
+
+    def sortResult(self, result_list):
+        # unittest does not seems to run in any particular order.
+        # Here at least we want to group them together by class.
+        rmap = {}
+        classes = []
+        for n,t,o,e in result_list:
+            cls = t.__class__
+            if not cls in rmap:
+                rmap[cls] = []
+                classes.append(cls)
+            rmap[cls].append((n,t,o,e))
+        r = [(cls, rmap[cls]) for cls in classes]
+        return r
+
+
+    def getReportAttributes(self, result):
+        """
+        Return report attributes as a list of (name, value).
+        Override this to add custom attributes.
+        """
+        startTime = str(self.startTime)[:19]
+        duration = str(self.stopTime - self.startTime)
+        status = []
+        if result.success_count: status.append('Pass %s'    % result.success_count)
+        if result.failure_count: status.append('Failure %s' % result.failure_count)
+        if result.error_count:   status.append('Error %s'   % result.error_count  )
+        if status:
+            status = ' '.join(status)
+        else:
+            status = 'none'
+        return [
+            ('Start Time', startTime),
+            ('Duration', duration),
+            ('Status', status),
+        ]
+
+
+    def generateReport(self, test, result):
+        report_attrs = self.getReportAttributes(result)
+        generator = 'HTMLTestRunner %s' % __version__
+        stylesheet = self._generate_stylesheet()
+        heading = self._generate_heading(report_attrs)
+        report = self._generate_report(result)
+        ending = self._generate_ending()
+        output = self.HTML_TMPL % dict(
+            title = saxutils.escape(self.title),
+            generator = generator,
+            stylesheet = stylesheet,
+            heading = heading,
+            report = report,
+            ending = ending,
+        )
+        self.stream.write(output.encode('utf8'))
+
+
+    def _generate_stylesheet(self):
+        return self.STYLESHEET_TMPL
+
+
+    def _generate_heading(self, report_attrs):
+        a_lines = []
+        for name, value in report_attrs:
+            line = self.HEADING_ATTRIBUTE_TMPL % dict(
+                    name = saxutils.escape(name),
+                    value = saxutils.escape(value),
+                )
+            a_lines.append(line)
+        heading = self.HEADING_TMPL % dict(
+            title = saxutils.escape(self.title),
+            parameters = ''.join(a_lines),
+            description = saxutils.escape(self.description),
+        )
+        return heading
+
+
+    def _generate_report(self, result):
+        rows = []
+        sortedResult = self.sortResult(result.result)
+        for cid, (cls, cls_results) in enumerate(sortedResult):
+            # subtotal for a class
+            np = nf = ne = 0
+            for n,t,o,e in cls_results:
+                if n == 0: np += 1
+                elif n == 1: nf += 1
+                else: ne += 1
+
+            # format class description
+            if cls.__module__ == "__main__":
+                name = cls.__name__
+            else:
+                name = "%s.%s" % (cls.__module__, cls.__name__)
+            doc = cls.__doc__ and cls.__doc__.split("\n")[0] or ""
+            desc = doc and '%s: %s' % (name, doc) or name
+
+            row = self.REPORT_CLASS_TMPL % dict(
+                style = ne > 0 and 'errorClass' or nf > 0 and 'failClass' or 'passClass',
+                desc = desc,
+                count = np+nf+ne,
+                Pass = np,
+                fail = nf,
+                error = ne,
+                cid = 'c%s' % (cid+1),
+            )
+            rows.append(row)
+
+            for tid, (n,t,o,e) in enumerate(cls_results):
+                self._generate_report_test(rows, cid, tid, n, t, o, e)
+
+        report = self.REPORT_TMPL % dict(
+            test_list = ''.join(rows),
+            count = str(result.success_count+result.failure_count+result.error_count),
+            Pass = str(result.success_count),
+            fail = str(result.failure_count),
+            error = str(result.error_count),
+        )
+        return report
+
+
+    def _generate_report_test(self, rows, cid, tid, n, t, o, e):
+        # e.g. 'pt1.1', 'ft1.1', etc
+        has_output = bool(o or e)
+        tid = (n == 0 and 'p' or 'f') + 't%s.%s' % (cid+1,tid+1)
+        name = t.id().split('.')[-1]
+        doc = t.shortDescription() or ""
+        desc = doc and ('%s: %s' % (name, doc)) or name
+        tmpl = has_output and self.REPORT_TEST_WITH_OUTPUT_TMPL or self.REPORT_TEST_NO_OUTPUT_TMPL
+
+        # o and e should be byte string because they are collected from stdout and stderr?
+        if isinstance(o,str):
+            # TODO: some problem with 'string_escape': it escape \n and mess up formating
+            # uo = unicode(o.encode('string_escape'))
+            # uo = o.decode('latin-1')
+            uo = e
+        else:
+            uo = o
+        if isinstance(e,str):
+            # TODO: some problem with 'string_escape': it escape \n and mess up formating
+            # ue = unicode(e.encode('string_escape'))
+            # ue = e.decode('latin-1')
+            ue = e
+        else:
+            ue = e
+
+        script = self.REPORT_TEST_OUTPUT_TMPL % dict(
+            id = tid,
+            output = saxutils.escape(str(uo)+ue),
+        )
+
+        row = tmpl % dict(
+            tid = tid,
+            Class = (n == 0 and 'hiddenRow' or 'none'),
+            style = n == 2 and 'errorCase' or (n == 1 and 'failCase' or 'none'),
+            desc = desc,
+            script = script,
+            status = self.STATUS[n],
+        )
+        rows.append(row)
+        if not has_output:
+            return
+
+    def _generate_ending(self):
+        return self.ENDING_TMPL
+
+
+##############################################################################
+# Facilities for running tests from the command line
+##############################################################################
+
+# Note: Reuse unittest.TestProgram to launch test. In the future we may
+# build our own launcher to support more specific command line
+# parameters like test title, CSS, etc.
+class TestProgram(unittest.TestProgram):
+    """
+    A variation of the unittest.TestProgram. Please refer to the bussinses
+    class for command line parameters.
+    """
+    def runTests(self):
+        # Pick HTMLTestRunner as the default test runner.
+        # bussinses class's testRunner parameter is not useful because it means
+        # we have to instantiate HTMLTestRunner before we know self.verbosity.
+        if self.testRunner is None:
+            self.testRunner = HTMLTestRunner(verbosity=self.verbosity)
+        unittest.TestProgram.runTests(self)
+
+main = TestProgram
+
+##############################################################################
+# Executing this module from the command line
+##############################################################################
+
+if __name__ == "__main__":
+    main(module=None)
Index: python-selenium-master/util/gettestdata.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/util/gettestdata.py b/python-selenium-master/util/gettestdata.py
new file mode 100644
--- /dev/null	(date 1662812104802)
+++ b/python-selenium-master/util/gettestdata.py	(date 1662812104802)
@@ -0,0 +1,23 @@
+""" 
+@author: lileilei
+@file: ddd.py 
+@time: 2018/1/19 11:43 
+"""
+import xlrd
+from util import  log
+logs=log.log_message()
+def huoqu_test(filepath,index):
+    try:
+        file = xlrd.open_workbook(filepath)
+        me = file.sheets()[index]
+        nrows = me.nrows
+        listdata = []
+        for i in range(1, nrows):
+            dict_canshu = {}
+            dict_canshu['id']=me.cell(i,0).value
+            dict_canshu.update(eval(me.cell(i,2).value))
+            dict_canshu.update(eval(me.cell(i,3).value))
+            listdata.append(dict_canshu)
+        return listdata
+    except Exception as e:
+        logs.error_log('获取测试用例数据失败，原因：%s'%e)
\ No newline at end of file
Index: python-selenium-master/util/BSTestRunner.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/util/BSTestRunner.py b/python-selenium-master/util/BSTestRunner.py
new file mode 100644
--- /dev/null	(date 1662812104691)
+++ b/python-selenium-master/util/BSTestRunner.py	(date 1662812104691)
@@ -0,0 +1,805 @@
+"""
+A TestRunner for use with the Python unit testing framework. It generates a HTML report to show the result at a glance.
+The simplest way to use this is to invoke its main method. E.g.
+
+    import unittest
+    import BSTestRunner
+
+    ... define your tests ...
+
+    if __name__ == '__main__':
+        BSTestRunner.main()
+
+
+For more customization options, instantiates a BSTestRunner object.
+BSTestRunner is a counterpart to unittest's TextTestRunner. E.g.
+
+    # output to a file
+    fp = file('my_report.html', 'wb')
+    runner = BSTestRunner.BSTestRunner(
+                stream=fp,
+                title='My unit test',
+                description='This demonstrates the report output by BSTestRunner.'
+                )
+
+    # Use an external stylesheet.
+    # See the Template_mixin class for more customizable options
+    runner.STYLESHEET_TMPL = '<link rel="stylesheet" href="my_stylesheet.css" type="text/css">'
+
+    # run the test
+    runner.run(my_test_suite)
+
+
+------------------------------------------------------------------------
+Copyright (c) 2004-2007, Wai Yip Tung
+Copyright (c) 2016, Eason Han
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are
+met:
+
+* Redistributions of source code must retain the above copyright notice,
+  this list of conditions and the following disclaimer.
+* Redistributions in binary form must reproduce the above copyright
+  notice, this list of conditions and the following disclaimer in the
+  documentation and/or other materials provided with the distribution.
+* Neither the name Wai Yip Tung nor the names of its contributors may be
+  used to endorse or promote products derived from this software without
+  specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
+IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
+OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+"""
+
+
+__author__ = "Wai Yip Tung && Eason Han"
+__version__ = "0.8.4"
+
+
+"""
+Change History
+
+Version 0.8.3
+* Modify html style using bootstrap3.
+
+Version 0.8.3
+* Prevent crash on class or module-level exceptions (Darren Wurf).
+
+Version 0.8.2
+* Show output inline instead of popup window (Viorel Lupu).
+
+Version in 0.8.1
+* Validated XHTML (Wolfgang Borgert).
+* Added description of test classes and test cases.
+
+Version in 0.8.0
+* Define Template_mixin class for customization.
+* Workaround a IE 6 bug that it does not treat <script> block as CDATA.
+
+Version in 0.7.1
+* Back port to Python 2.3 (Frank Horowitz).
+* Fix missing scroll bars in detail log (Podi).
+"""
+
+# TODO: color stderr
+# TODO: simplify javascript using ,ore than 1 class in the class attribute?
+
+import datetime
+from io import StringIO as StringIO
+import sys
+import time
+import unittest
+from xml.sax import saxutils
+
+
+# ------------------------------------------------------------------------
+# The redirectors below are used to capture output during testing. Output
+# sent to sys.stdout and sys.stderr are automatically captured. However
+# in some cases sys.stdout is already cached before BSTestRunner is
+# invoked (e.g. calling logging.basicConfig). In order to capture those
+# output, use the redirectors for the cached stream.
+#
+# e.g.
+#   >>> logging.basicConfig(stream=BSTestRunner.stdout_redirector)
+#   >>>
+
+def to_unicode(s):
+    return s
+    # try:
+    #     return unicode(s)
+    # except UnicodeDecodeError:
+    #     # s is non ascii byte string
+    #     return s.decode('unicode_escape')
+
+class OutputRedirector(object):
+    """ Wrapper to redirect stdout or stderr """
+    def __init__(self, fp):
+        self.fp = fp
+
+    def write(self, s):
+        self.fp.write(s)
+
+    def writelines(self, lines):
+        lines = map(to_unicode, lines)
+        self.fp.writelines(lines)
+
+    def flush(self):
+        self.fp.flush()
+
+stdout_redirector = OutputRedirector(sys.stdout)
+stderr_redirector = OutputRedirector(sys.stderr)
+
+
+
+# ----------------------------------------------------------------------
+# Template
+
+class Template_mixin(object):
+    """
+    Define a HTML template for report customerization and generation.
+
+    Overall structure of an HTML report
+
+    HTML
+    +------------------------+
+    |<html>                  |
+    |  <head>                |
+    |                        |
+    |   STYLESHEET           |
+    |   +----------------+   |
+    |   |                |   |
+    |   +----------------+   |
+    |                        |
+    |  </head>               |
+    |                        |
+    |  <body>                |
+    |                        |
+    |   HEADING              |
+    |   +----------------+   |
+    |   |                |   |
+    |   +----------------+   |
+    |                        |
+    |   REPORT               |
+    |   +----------------+   |
+    |   |                |   |
+    |   +----------------+   |
+    |                        |
+    |   ENDING               |
+    |   +----------------+   |
+    |   |                |   |
+    |   +----------------+   |
+    |                        |
+    |  </body>               |
+    |</html>                 |
+    +------------------------+
+    """
+
+    STATUS = {
+    0: 'pass',
+    1: 'fail',
+    2: 'error',
+    }
+
+    DEFAULT_TITLE = 'Unit Test Report'
+    DEFAULT_DESCRIPTION = ''
+
+    # ------------------------------------------------------------------------
+    # HTML Template
+
+    HTML_TMPL = r"""<!DOCTYPE html>
+<html lang="zh-cn">
+  <head>
+    <meta charset="utf-8">
+    <meta http-equiv="X-UA-Compatible" content="IE=edge">
+    <meta name="viewport" content="width=device-width, initial-scale=1">
+    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+    <title>%(title)s</title>
+    <meta name="generator" content="%(generator)s"/>
+    <link rel="stylesheet" href="http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css">
+    %(stylesheet)s
+
+    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
+    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
+    <!--[if lt IE 9]>
+      <script src="http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"></script>
+      <script src="http://cdn.bootcss.com/respond.js/1.4.2/respond.min.js"></script>
+    <![endif]-->
+  </head>
+<body>
+<script language="javascript" type="text/javascript"><!--
+output_list = Array();
+
+/* level - 0:Summary; 1:Failed; 2:All */
+function showCase(level) {
+    trs = document.getElementsByTagName("tr");
+    for (var i = 0; i < trs.length; i++) {
+        tr = trs[i];
+        id = tr.id;
+        if (id.substr(0,2) == 'ft') {
+            if (level < 1) {
+                tr.className = 'hiddenRow';
+            }
+            else {
+                tr.className = '';
+            }
+        }
+        if (id.substr(0,2) == 'pt') {
+            if (level > 1) {
+                tr.className = '';
+            }
+            else {
+                tr.className = 'hiddenRow';
+            }
+        }
+    }
+}
+
+
+function showClassDetail(cid, count) {
+    var id_list = Array(count);
+    var toHide = 1;
+    for (var i = 0; i < count; i++) {
+        tid0 = 't' + cid.substr(1) + '.' + (i+1);
+        tid = 'f' + tid0;
+        tr = document.getElementById(tid);
+        if (!tr) {
+            tid = 'p' + tid0;
+            tr = document.getElementById(tid);
+        }
+        id_list[i] = tid;
+        if (tr.className) {
+            toHide = 0;
+        }
+    }
+    for (var i = 0; i < count; i++) {
+        tid = id_list[i];
+        if (toHide) {
+            document.getElementById('div_'+tid).style.display = 'none'
+            document.getElementById(tid).className = 'hiddenRow';
+        }
+        else {
+            document.getElementById(tid).className = '';
+        }
+    }
+}
+
+
+function showTestDetail(div_id){
+    var details_div = document.getElementById(div_id)
+    var displayState = details_div.style.display
+    // alert(displayState)
+    if (displayState != 'block' ) {
+        displayState = 'block'
+        details_div.style.display = 'block'
+    }
+    else {
+        details_div.style.display = 'none'
+    }
+}
+
+
+function html_escape(s) {
+    s = s.replace(/&/g,'&amp;');
+    s = s.replace(/</g,'&lt;');
+    s = s.replace(/>/g,'&gt;');
+    return s;
+}
+
+/* obsoleted by detail in <div>
+function showOutput(id, name) {
+    var w = window.open("", //url
+                    name,
+                    "resizable,scrollbars,status,width=800,height=450");
+    d = w.document;
+    d.write("<pre>");
+    d.write(html_escape(output_list[id]));
+    d.write("\n");
+    d.write("<a href='javascript:window.close()'>close</a>\n");
+    d.write("</pre>\n");
+    d.close();
+}
+*/
+--></script>
+
+<div class="container">
+    %(heading)s
+    %(report)s
+    %(ending)s
+</div>
+
+</body>
+</html>
+"""
+    # variables: (title, generator, stylesheet, heading, report, ending)
+
+
+    # ------------------------------------------------------------------------
+    # Stylesheet
+    #
+    # alternatively use a <link> for external style sheet, e.g.
+    #   <link rel="stylesheet" href="$url" type="text/css">
+
+    STYLESHEET_TMPL = """
+<style type="text/css" media="screen">
+
+/* -- css div popup ------------------------------------------------------------------------ */
+.popup_window {
+    display: none;
+    position: relative;
+    left: 0px;
+    top: 0px;
+    /*border: solid #627173 1px; */
+    padding: 10px;
+    background-color: #99CCFF;
+    font-family: "Lucida Console", "Courier New", Courier, monospace;
+    text-align: left;
+    font-size: 10pt;
+    width: 1200px;
+}
+
+/* -- report ------------------------------------------------------------------------ */
+
+#show_detail_line .label {
+    font-size: 85%;
+    cursor: pointer;
+}
+
+#show_detail_line {
+    margin: 2em auto 1em auto;
+}
+
+#total_row  { font-weight: bold; }
+.hiddenRow  { display: none; }
+.case   { margin-left: 2em; }
+
+</style>
+"""
+
+
+
+    # ------------------------------------------------------------------------
+    # Heading
+    #
+
+    HEADING_TMPL = """<div class='heading'>
+<h1>%(title)s</h1>
+%(parameters)s
+<p class='description'>%(description)s</p>
+</div>
+
+""" # variables: (title, parameters, description)
+
+    HEADING_ATTRIBUTE_TMPL = """<p><strong>%(name)s:</strong> %(value)s</p>
+""" # variables: (name, value)
+
+
+
+    # ------------------------------------------------------------------------
+    # Report
+    #
+
+    REPORT_TMPL = """
+<p id='show_detail_line'>
+<span class="label label-primary" onclick="showCase(0)">Summary</span>
+<span class="label label-danger" onclick="showCase(1)">Failed</span>
+<span class="label label-default" onclick="showCase(2)">All</span>
+</p>
+<table id='result_table' class="table">
+    <thead>
+        <tr id='header_row'>
+            <th>Test Group/Test case</td>
+            <th>Count</td>
+            <th>Pass</td>
+            <th>Fail</td>
+            <th>Error</td>
+            <th>View</td>
+        </tr>
+    </thead>
+    <tbody>
+        %(test_list)s
+    </tbody>
+    <tfoot>
+        <tr id='total_row'>
+            <td>Total</td>
+            <td>%(count)s</td>
+            <td class="text text-success">%(Pass)s</td>
+            <td class="text text-danger">%(fail)s</td>
+            <td class="text text-warning">%(error)s</td>
+            <td>&nbsp;</td>
+        </tr>
+    </tfoot>
+</table>
+""" # variables: (test_list, count, Pass, fail, error)
+
+    REPORT_CLASS_TMPL = r"""
+<tr class='%(style)s'>
+    <td>%(desc)s</td>
+    <td>%(count)s</td>
+    <td>%(Pass)s</td>
+    <td>%(fail)s</td>
+    <td>%(error)s</td>
+    <td><a class="btn btn-xs btn-primary"href="javascript:showClassDetail('%(cid)s',%(count)s)">Detail</a></td>
+</tr>
+""" # variables: (style, desc, count, Pass, fail, error, cid)
+
+
+    REPORT_TEST_WITH_OUTPUT_TMPL = r"""
+<tr id='%(tid)s' class='%(Class)s'>
+    <td class='%(style)s'><div class='case'>%(desc)s</div></td>
+    <td colspan='5' align='center'>
+
+    <!--css div popup start-->
+    <a class="popup_link btn btn-xs btn-default" onfocus='this.blur();' href="javascript:showTestDetail('div_%(tid)s')" >
+        %(status)s</a>
+
+    <div id='div_%(tid)s' class="popup_window">
+        <div style='text-align: right;cursor:pointer'>
+        <a onfocus='this.blur();' onclick="document.getElementById('div_%(tid)s').style.display = 'none' " >
+           [x]</a>
+        </div>
+        <pre>
+        %(script)s
+        </pre>
+    </div>
+    <!--css div popup end-->
+
+    </td>
+</tr>
+""" # variables: (tid, Class, style, desc, status)
+
+
+    REPORT_TEST_NO_OUTPUT_TMPL = r"""
+<tr id='%(tid)s' class='%(Class)s'>
+    <td class='%(style)s'><div class='case'>%(desc)s</div></td>
+    <td colspan='5' align='center'>%(status)s</td>
+</tr>
+""" # variables: (tid, Class, style, desc, status)
+
+
+    REPORT_TEST_OUTPUT_TMPL = r"""
+%(id)s: %(output)s
+""" # variables: (id, output)
+
+
+
+    # ------------------------------------------------------------------------
+    # ENDING
+    #
+
+    ENDING_TMPL = """<div id='ending'>&nbsp;</div>"""
+
+# -------------------- The end of the Template class -------------------
+
+
+TestResult = unittest.TestResult
+
+class _TestResult(TestResult):
+    # note: _TestResult is a pure representation of results.
+    # It lacks the output and reporting ability compares to unittest._TextTestResult.
+
+    def __init__(self, verbosity=1):
+        TestResult.__init__(self)
+        self.outputBuffer = StringIO()
+        self.stdout0 = None
+        self.stderr0 = None
+        self.success_count = 0
+        self.failure_count = 0
+        self.error_count = 0
+        self.verbosity = verbosity
+
+        # result is a list of result in 4 tuple
+        # (
+        #   result code (0: success; 1: fail; 2: error),
+        #   TestCase object,
+        #   Test output (byte string),
+        #   stack trace,
+        # )
+        self.result = []
+
+
+    def startTest(self, test):
+        TestResult.startTest(self, test)
+        # just one buffer for both stdout and stderr  更改
+        self.outputBuffer = StringIO()
+        stdout_redirector.fp = self.outputBuffer
+        stderr_redirector.fp = self.outputBuffer
+        self.stdout0 = sys.stdout
+        self.stderr0 = sys.stderr
+        sys.stdout = stdout_redirector
+        sys.stderr = stderr_redirector
+
+
+    def complete_output(self):
+        """
+        Disconnect output redirection and return buffer.
+        Safe to call multiple times.
+        """
+        if self.stdout0:
+            sys.stdout = self.stdout0
+            sys.stderr = self.stderr0
+            self.stdout0 = None
+            self.stderr0 = None
+        return self.outputBuffer.getvalue()
+
+
+    def stopTest(self, test):
+        # Usually one of addSuccess, addError or addFailure would have been called.
+        # But there are some path in unittest that would bypass this.
+        # We must disconnect stdout in stopTest(), which is guaranteed to be called.
+        self.complete_output()
+
+
+    def addSuccess(self, test):
+        self.success_count += 1
+        TestResult.addSuccess(self, test)
+        output = self.complete_output()
+        self.result.append((0, test, output, ''))
+        if self.verbosity > 1:
+            sys.stderr.write('ok ')
+            sys.stderr.write(str(test))
+            sys.stderr.write('\n')
+        else:
+            sys.stderr.write('.')
+
+    def addError(self, test, err):
+        self.error_count += 1
+        TestResult.addError(self, test, err)
+        _, _exc_str = self.errors[-1]
+        output = self.complete_output()
+        self.result.append((2, test, output, _exc_str))
+        if self.verbosity > 1:
+            sys.stderr.write('E  ')
+            sys.stderr.write(str(test))
+            sys.stderr.write('\n')
+        else:
+            sys.stderr.write('E')
+
+    def addFailure(self, test, err):
+        self.failure_count += 1
+        TestResult.addFailure(self, test, err)
+        _, _exc_str = self.failures[-1]
+        output = self.complete_output()
+        self.result.append((1, test, output, _exc_str))
+        if self.verbosity > 1:
+            sys.stderr.write('F  ')
+            sys.stderr.write(str(test))
+            sys.stderr.write('\n')
+        else:
+            sys.stderr.write('F')
+
+
+class BSTestRunner(Template_mixin):
+    """
+    """
+    def __init__(self, stream=sys.stdout, verbosity=1, title=None, description=None):
+        self.stream = stream
+        self.verbosity = verbosity
+        if title is None:
+            self.title = self.DEFAULT_TITLE
+        else:
+            self.title = title
+        if description is None:
+            self.description = self.DEFAULT_DESCRIPTION
+        else:
+            self.description = description
+
+        self.startTime = datetime.datetime.now()
+
+
+    def run(self, test):
+        "Run the given test case or test suite."
+        result = _TestResult(self.verbosity)
+        try:
+            test(result)
+        except TypeError:
+            pass
+        self.stopTime = datetime.datetime.now()
+        self.generateReport(test, result)
+        print('\n测试耗时: %s' % (self.stopTime-self.startTime))
+        return result
+
+
+    def sortResult(self, result_list):
+        # unittest does not seems to run in any particular order.
+        # Here at least we want to group them together by class.
+        rmap = {}
+        classes = []
+        for n,t,o,e in result_list:
+            cls = t.__class__
+            if not cls in rmap:
+                rmap[cls] = []
+                classes.append(cls)
+            rmap[cls].append((n,t,o,e))
+        r = [(cls, rmap[cls]) for cls in classes]
+        return r
+
+
+    def getReportAttributes(self, result):
+        """
+        Return report attributes as a list of (name, value).
+        Override this to add custom attributes.
+        """
+        startTime = str(self.startTime)[:19]
+        duration = str(self.stopTime - self.startTime)
+        status = []
+        if result.success_count: status.append('<span class="text text-success">Pass <strong>%s</strong></span>'    % result.success_count)
+        if result.failure_count: status.append('<span class="text text-danger">Failure <strong>%s</strong></span>' % result.failure_count)
+        if result.error_count:   status.append('<span class="text text-warning">Error <strong>%s</strong></span>'   % result.error_count  )
+        if status:
+            status = ' '.join(status)
+        else:
+            status = 'none'
+        return [
+            ('Start Time', startTime),
+            ('Duration', duration),
+            ('Status', status),
+        ]
+
+
+    def generateReport(self, test, result):
+        report_attrs = self.getReportAttributes(result)
+        generator = 'BSTestRunner %s' % __version__
+        stylesheet = self._generate_stylesheet()
+        heading = self._generate_heading(report_attrs)
+        report = self._generate_report(result)
+        ending = self._generate_ending()
+        output = self.HTML_TMPL % dict(
+            title = saxutils.escape(self.title),
+            generator = generator,
+            stylesheet = stylesheet,
+            heading = heading,
+            report = report,
+            ending = ending,
+        )
+        self.stream.write(output.encode('utf-8'))
+
+
+    def _generate_stylesheet(self):
+        return self.STYLESHEET_TMPL
+
+
+    def _generate_heading(self, report_attrs):
+        a_lines = []
+        for name, value in report_attrs:
+            line = self.HEADING_ATTRIBUTE_TMPL % dict(
+                    name = saxutils.escape(name),####更改
+                    # value = saxutils.escape(value),
+
+                    value = value,
+                )
+            a_lines.append(line)
+        heading = self.HEADING_TMPL % dict(
+            title = saxutils.escape(self.title),
+            parameters = ''.join(a_lines),
+            description = saxutils.escape(self.description),
+        )
+        return heading
+
+
+    def _generate_report(self, result):
+        rows = []
+        sortedResult = self.sortResult(result.result)
+        for cid, (cls, cls_results) in enumerate(sortedResult):
+            # subtotal for a class
+            np = nf = ne = 0
+            for n,t,o,e in cls_results:
+                if n == 0: np += 1
+                elif n == 1: nf += 1
+                else: ne += 1
+
+            # format class description
+            if cls.__module__ == "__main__":
+                name = cls.__name__
+            else:
+                name = "%s.%s" % (cls.__module__, cls.__name__)
+            doc = cls.__doc__ and cls.__doc__.split("\n")[0] or ""
+            desc = doc and '%s: %s' % (name, doc) or name
+
+            row = self.REPORT_CLASS_TMPL % dict(
+                style = ne > 0 and 'text text-warning' or nf > 0 and 'text text-danger' or 'text text-success',
+                desc = desc,
+                count = np+nf+ne,
+                Pass = np,
+                fail = nf,
+                error = ne,
+                cid = 'c%s' % (cid+1),
+            )
+            rows.append(row)
+
+            for tid, (n,t,o,e) in enumerate(cls_results):
+                self._generate_report_test(rows, cid, tid, n, t, o, e)
+
+        report = self.REPORT_TMPL % dict(
+            test_list = ''.join(rows),
+            count = str(result.success_count+result.failure_count+result.error_count),
+            Pass = str(result.success_count),
+            fail = str(result.failure_count),
+            error = str(result.error_count),
+        )
+        return report
+
+
+    def _generate_report_test(self, rows, cid, tid, n, t, o, e):
+        # e.g. 'pt1.1', 'ft1.1', etc
+        has_output = bool(o or e)
+        tid = (n == 0 and 'p' or 'f') + 't%s.%s' % (cid+1,tid+1)
+        name = t.id().split('.')[-1]
+        doc = t.shortDescription() or ""
+        desc = doc and ('%s: %s' % (name, doc)) or name
+        tmpl = has_output and self.REPORT_TEST_WITH_OUTPUT_TMPL or self.REPORT_TEST_NO_OUTPUT_TMPL
+
+        # o and e should be byte string because they are collected from stdout and stderr?
+        if isinstance(o,str):
+            # TODO: some problem with 'string_escape': it escape \n and mess up formating
+            # uo = unicode(o.encode('string_escape'))
+            uo = o
+        else:
+            uo = o
+        if isinstance(e,str):
+            # TODO: some problem with 'string_escape': it escape \n and mess up formating
+            # ue = unicode(e.encode('string_escape'))
+            ue = e
+        else:
+            ue = e
+
+        script = self.REPORT_TEST_OUTPUT_TMPL % dict(
+            id = tid,
+            output = saxutils.escape(uo+ue),
+        )
+
+        row = tmpl % dict(
+            tid = tid,
+            Class = (n == 0 and 'hiddenRow' or 'none'),
+            # Class = (n == 0 and 'hiddenRow' or 'text text-success'),
+            # style = n == 2 and 'errorCase' or (n == 1 and 'failCase' or 'none'),
+            style = n == 2 and 'text text-warning' or (n == 1 and 'text text-danger' or 'text text-success'),
+            desc = desc,
+            script = script,
+            status = self.STATUS[n],
+        )
+        rows.append(row)
+        if not has_output:
+            return
+
+    def _generate_ending(self):
+        return self.ENDING_TMPL
+
+
+##############################################################################
+# Facilities for running tests from the command line
+##############################################################################
+
+# Note: Reuse unittest.TestProgram to launch test. In the future we may
+# build our own launcher to support more specific command line
+# parameters like test title, CSS, etc.
+class TestProgram(unittest.TestProgram):
+    """
+    A variation of the unittest.TestProgram. Please refer to the base
+    class for command line parameters.
+    """
+    def runTests(self):
+        # Pick BSTestRunner as the default test runner.
+        # base class's testRunner parameter is not useful because it means
+        # we have to instantiate BSTestRunner before we know self.verbosity.
+        if self.testRunner is None:
+            self.testRunner = BSTestRunner(verbosity=self.verbosity)
+        unittest.TestProgram.runTests(self)
+
+main = TestProgram
+
+##############################################################################
+# Executing this module from the command line
+##############################################################################
+
+if __name__ == "__main__":
+    main(module=None)
Index: python-selenium-master/data/page_data.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/data/page_data.yaml b/python-selenium-master/data/page_data.yaml
new file mode 100644
--- /dev/null	(date 1662812104267)
+++ b/python-selenium-master/data/page_data.yaml	(date 1662812104267)
@@ -0,0 +1,55 @@
+login:
+    url: "http://127.0.0.1:8000/"
+    denglu: "请登录"
+    name: "firstname"
+    password: "inputPassword"
+    denglu_btm: "denglu"
+    login_err: "/html/body/form/div[4]/div/h4[2]"
+    login_suc: "/html/body/nav/div/div[2]/ul/div/ul/li[3]/a/span"
+zhuce:
+    url: "http://127.0.0.1:8000/"
+    zhuc: "注册"
+    username: "username"  #class
+    password: "password" #class
+    querenpass: "password1" #class
+    shouji: "shouji" #class
+    youxiang: "email" #class
+    tijiao_btn: "submit" #class
+    zhuce_err: "/html/body/form/div[6]/div/h4" #xpath
+    zhuce_suc: "denglu" #id
+zhaohui:
+    url: "http://127.0.0.1:8000/reset_pwd"
+    username: 'input[name=\"firstname\"]'
+    email: 'input[name=\"email\"]'
+    zhaohui_btn: 'input[type=\"submit\"]'
+    zhaohui_err: "/html/body/form/div[3]/div/h4" #xpath
+    zhaohui_suc: 'input[type=\"submit\"]' #css
+reset_pwd:
+    url: "http://127.0.0.1:8000/ret_passord"
+    email: 'input[name=\"email\"]'
+    yanzheng: 'input[name=\"yanzhengma\"]'
+    mima: 'input[name=\"inputPassword\"]'
+    chongzhimima: 'input[name=\"inputPassword1\"]'
+    reset_btn: 'input[type=\"submit\"]'
+    reset_error: "/html/body/form/div[5]/div/h4"
+    reset_suc: "denglu" #id
+xiugai:
+    url: "http://127.0.0.1:8000/xiugaimima"
+    yuanmi: 'input[type=\"pass_yuan\"]'
+    xiugaimi: 'input[type=\"inputPassword\"]'
+    xiugaimi1: 'input[type=\"inputPassword1\"]'
+    xiugai_but: "修改密码"
+    xiu_err: "/html/body/form/div[4]/div/h4"
+    xiu_suc: "denglu"#id
+xiebo:
+    url: "http://127.0.0.1:8000/xiebo"
+    biaoti: 'input[type=\"biaoti1\"]'
+    neirong: "comment_textarea"#classname
+    fenlei: "jumpMenu" #id
+    fenlei1: "/html/body/div/div/div[1]/div/div[2]/form/div[4]/select/option[2]" #git xpath
+    biaoqian: "biaoqian" #id
+    bianqian1: 'input[value=\"python\"]'
+    tuijian: 'input[name=\"tuijian\"]'
+    xiebo_btn: 'input[type=\"submit\"]'
+    xiebo_err: "/html/body/div/div/div[1]/div/div[2]/form/h4"
+    xiebo_suc: "/html/body/div/div/div[1]/div/div[3]/h4"
\ No newline at end of file
Index: python-selenium-master/case/zhuce_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/case/zhuce_test.py b/python-selenium-master/case/zhuce_test.py
new file mode 100644
--- /dev/null	(date 1662812104144)
+++ b/python-selenium-master/case/zhuce_test.py	(date 1662812104144)
@@ -0,0 +1,32 @@
+# -*- coding: utf-8 -*-
+# @Author  : leizi
+from bussinses.funnicgong import Zhuce_tes
+import unittest,time,os,ddt
+from util import log
+from selenium import webdriver
+path=os.getcwd()
+from util.gettestdata import huoqu_test
+case_path=path+'\\data\\case.xlsx'
+casedata=huoqu_test(case_path,1)
+@ddt.ddt
+class Testzhuce(unittest.TestCase):
+    def setUp(self):
+        self.logs = log.log_message()
+        self.derve=webdriver.Firefox()
+        self.zhuce_fun=Zhuce_tes(self.derve)
+    @ddt.data(*casedata)
+    def test_zhuce_1(self,casedata):
+        self.name=casedata['username']
+        self.password=casedata['mima']
+        self.passwordque=casedata['nima2']
+        self.shoujihao=casedata['shoujihao']
+        self.youxiang=casedata['youxiang']
+        self.suc=casedata['suc']
+        self.assert_vale=casedata['assert_vale']
+        self.re_data=self.zhuce_fun.zhuce(self.name,self.password,self.passwordque,self.shoujihao,self.youxiang,self.suc)
+        self.derve.get_screenshot_as_file(path+'\\resultpang\\%s.png'%casedata[id])
+        self.logs.info_log("input:name:%s password:%s,passwordque:%s,shoujihao:%s,youxiang:%s ,assert:%s"%(self.name,self.password,self.passwordque,self.shoujihao,self.youxiang,self.assert_vale))
+        time.sleep(1)
+        self.assertEqual(self.re_data, self.assert_vale)
+    def tearDown(self):
+        self.derve.quit()
\ No newline at end of file
Index: python-selenium-master/case/zhaohui_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/case/zhaohui_test.py b/python-selenium-master/case/zhaohui_test.py
new file mode 100644
--- /dev/null	(date 1662812104091)
+++ b/python-selenium-master/case/zhaohui_test.py	(date 1662812104091)
@@ -0,0 +1,29 @@
+# -*- coding: utf-8 -*-
+# @Author  : leizi
+from bussinses.funnicgong import Zaohui_tes
+import unittest,time,os,ddt
+from util import log
+from selenium import webdriver
+from util.gettestdata import huoqu_test
+path=os.getcwd()
+case_path=path+'\\data\\case.xlsx'
+casedata=huoqu_test(case_path,2)
+@ddt.ddt
+class Testzhaohui(unittest.TestCase):
+    def setUp(self):
+        self.logs = log.log_message()
+        self.derve=webdriver.Firefox()
+        self.zhaohui_fun=Zaohui_tes(self.derve)
+    @ddt.data(*casedata)
+    def test_zhaohui_1(self,casedata):
+        self.username=casedata['username']
+        self.email=casedata['email']
+        self.suc=casedata['suc']
+        self.assert_vale=casedata['assert_vale']
+        self.retu_data=self.zhaohui_fun.zhaohui(self.username,self.email,self.suc)
+        self.derve.get_screenshot_as_file(path+'\\resultpang\\%s.png'%casedata['id'])
+        self.logs.info_log('inptut name:%s,email:%s,assert:%s'%(self.username,self.email,self.assert_vale))
+        time.sleep(1)
+        self.assertEqual(self.retu_data, self.assert_vale)
+    def tearDown(self):
+        self.derve.quit()
\ No newline at end of file
Index: python-selenium-master/case/xiugai_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/case/xiugai_test.py b/python-selenium-master/case/xiugai_test.py
new file mode 100644
--- /dev/null	(date 1662812104038)
+++ b/python-selenium-master/case/xiugai_test.py	(date 1662812104038)
@@ -0,0 +1,29 @@
+# -*- coding: utf-8 -*-
+# @Author  : leizi
+from bussinses.funnicgong import Xiugai_tes
+from selenium import webdriver
+import unittest,time,os,ddt
+from util import log
+from util.gettestdata import huoqu_test
+path=os.getcwd()
+case_path=path+'\\data\\case.xlsx'
+casedata=huoqu_test(case_path,3)
+@ddt.ddt
+class Test_xiugai(unittest.TestCase):
+    def setUp(self):
+        self.logs = log.log_message()
+        self.derve=webdriver.Fi()
+        self.xiugai_fun=Xiugai_tes(self.derve)
+    @ddt.data(*casedata)
+    def test_xiugai_1(self,casedata):
+        self.password=casedata['yuanmi']
+        self.xiugaimi=casedata['xiugaimi']
+        self.xiugaimi1=casedata['xiugaimi1']
+        self.suc=casedata['suc']
+        self.assert_vale=casedata['assert_vale']
+        self.return_data=self.xiugai_fun.xiugai(self.suc,self.password,self.xiugaimi,self.xiugaimi1)
+        self.logs.info_log("input: password:%s,xiugaimima:%s,xiugaimima1:%s,assert:%s"%(self.password,self.xiugaimi,self.xiugaimi1,self.assert_vale))
+        time.sleep(1)
+        self.assertAlmostEqual(self.return_data,self.assert_vale)
+    def tearDown(self):
+        self.derve.quit()
Index: python-selenium-master/case/login_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/case/login_test.py b/python-selenium-master/case/login_test.py
new file mode 100644
--- /dev/null	(date 1662812103988)
+++ b/python-selenium-master/case/login_test.py	(date 1662812103988)
@@ -0,0 +1,26 @@
+from bussinses.funnicgong import Login_tes
+import ddt,unittest,os
+from util import  log
+from selenium import webdriver
+from util.gettestdata import huoqu_test
+path=os.getcwd()
+case_path=path+'\\data\\case.xlsx'
+casedata=huoqu_test(case_path,3)
+@ddt.ddt
+class Testlogin(unittest.TestCase):
+    def setUp(self):
+        self.logs=log.log_message()
+        self.derve=webdriver.Firefox()
+        self.login_fun=Login_tes(self.derve)
+    @ddt.data(*casedata)
+    def test_login1(self,casedata):
+        self.name=casedata['username']
+        self.pwd=casedata['pwd']
+        self.suc=casedata['suc']
+        self.assert_value = casedata['assert']
+        self.derve.get_screenshot_as_file(path+'\\resultpang\\%s.png'%casedata)
+        self.logs.info_log('input data:name:%s,pwd:%s,suc:%s,assert:%s' % (self.name, self.pwd, self.suc, self.assert_value))
+        self.re_data = self.login_fun.login( self.suc,self.name, self.pwd)
+        self.assertEqual(self.re_data, self.assert_value)
+    def tearDown(self):
+        self.derve.quit()
Index: python-selenium-master/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/__init__.py b/python-selenium-master/__init__.py
new file mode 100644
--- /dev/null	(date 1662812107881)
+++ b/python-selenium-master/__init__.py	(date 1662812107881)
@@ -0,0 +1,6 @@
+# encoding: utf-8  
+""" 
+@author: lileilei 
+@file: __init__.py 
+@time: 2018/3/24 18:40 
+""" 
\ No newline at end of file
Index: python-selenium-master/run.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/run.py b/python-selenium-master/run.py
new file mode 100644
--- /dev/null	(date 1662812103821)
+++ b/python-selenium-master/run.py	(date 1662812103821)
@@ -0,0 +1,6 @@
+# -*- coding: utf-8 -*-
+# @Date    : 2017-08-11 15:34:37
+# @Author  : lileilei 
+from suite.testsuite import create_report
+if __name__ == '__main__':
+	create_report()
\ No newline at end of file
Index: python-selenium-master/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/README.md b/python-selenium-master/README.md
new file mode 100644
--- /dev/null	(date 1662812103651)
+++ b/python-selenium-master/README.md	(date 1662812103651)
@@ -0,0 +1,12 @@
+# python+selenium +HTMLTestRunner自动化测试
+## python 3 +selenium3 +HTMLTestRunner(python3版本)
+### 使用的框架是python自带的unittest。使用ddt数据驱动，Excel管理测试用例
+### bussinses 公共的逻辑模块编写
+###  data存放测试用例，界面定位元素
+###  report存放测试报告
+###   case存放测试用例。
+###  log 存放测试过程中的测试日志
+###  resultpang存放测试过程中的截图
+###  suite  测试用例集
+### util 公共模块
+###   run.py  执行脚本。
\ No newline at end of file
Index: python-selenium-master/.idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/.idea/inspectionProfiles/profiles_settings.xml b/python-selenium-master/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1662812129271)
+++ b/python-selenium-master/.idea/inspectionProfiles/profiles_settings.xml	(date 1662812129271)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: python-selenium-master/config.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/config.py b/python-selenium-master/config.py
new file mode 100644
--- /dev/null	(date 1662812103719)
+++ b/python-selenium-master/config.py	(date 1662812103719)
@@ -0,0 +1,9 @@
+# encoding: utf-8  
+""" 
+@author: lileilei 
+@file: config.py 
+@time: 2018/3/24 18:39 
+"""
+description='测试结果'  #测试报告需要的描述
+reporttitle='自动化测试报告' #测试报告需要的title
+liulanqi='Firefox'#测试所需要的浏览器
\ No newline at end of file
Index: python-selenium-master/bussinses/funnicgong.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/python-selenium-master/bussinses/funnicgong.py b/python-selenium-master/bussinses/funnicgong.py
new file mode 100644
--- /dev/null	(date 1662812103883)
+++ b/python-selenium-master/bussinses/funnicgong.py	(date 1662812103883)
@@ -0,0 +1,180 @@
+import yaml,os
+path=os.getcwd()
+from util import log
+class Login_tes:#登录模块封装
+    def __init__(self,driver):#
+        self.driber=driver
+        self.logs = log.log_message()
+        self.file=open(path+"\\data\\page_data.yaml", "r",encoding= "utf-8")
+        self.data=yaml.load(self.file)
+        self.file.close()
+        self.lo_url=self.data['login'].get('url')
+        self.denglu=self.data['login'].get('denglu')
+        self.username=self.data['login'].get('name')
+        self.password=self.data['login'].get('password')
+        self.sub=self.data['login'].get('denglu_btm')
+        self.lo_err=self.data['login'].get('login_err')
+        self.lo_suc=self.data['login'].get('login_suc')
+        self.driber.get(self.lo_url)
+    def login(self,suc,name,password):
+        try:
+            self.driber.find_element_by_link_text(self.denglu).click()
+            self.driber.find_element_by_id(self.username).clear()
+            self.driber.find_element_by_id(self.username).send_keys(name)
+            self.driber.find_element_by_id(self.password).click()
+            self.driber.find_element_by_id(self.password).send_keys(password)
+            self.driber.find_element_by_id(self.sub).click()
+            if suc=='1':
+                 self.login_su = self.driber.find_element_by_xpath(self.lo_suc).text
+                 return self.login_su
+            if suc=='0':
+                self.login_err=self.driber.find_element_by_xpath(self.lo_err).text
+        except Exception as e:
+            self.logs.error_log('用例执行失败，原因：%s'%e)
+        finally:
+            self.driber.quit()
+class Zhuce_tes:#注册模块的封装
+    def __init__(self,driver):
+        self.deriver=driver
+        title = '注册模块'
+        self.logs = log.log_message()
+        self.file1=open(path+"\\data\\page_data.yaml", "r",encoding= "utf-8")
+        self.data=yaml.load(self.file1)
+        self.file1.close()
+        self.zhu_url=self.data['zhuce'].get('url')
+        self.zhu=self.data['zhuce'].get('zhuc')
+        self.zhu_user=self.data['zhuce'].get('username')
+        self.zhu_pwd=self.data['zhuce'].get('password')
+        self.zhu_qpwd=self.data['zhuce'].get('querenpass')
+        self.zhu_shouji=self.data['zhuce'].get('shouji')
+        self.zhu_email=self.data['zhuce'].get('youxiang')
+        self.zhu_butn=self.data['zhuce'].get('tijiao_btn')
+        self.zhu_suc=self.data['zhuce'].get('zhuce_suc')
+        self.zhu_err=self.data['zhuce'].get('zhuce_err')
+        self.deriver.get(self.zhu_url)
+    def zhuce(self,suc,name,password,password1,shouji,email):
+        try:
+            self.deriver.find_element_by_link_text(self.zhu).click()
+            self.deriver.find_element_by_class_name(self.zhu_user).clear()
+            self.deriver.find_element_by_class_name(self.zhu_user).send_keys(name)
+            self.deriver.find_element_by_class_name(self.zhu_pwd).clear()
+            self.deriver.find_element_by_class_name(self.zhu_pwd).send_keys(password)
+            self.deriver.find_element_by_class_name(self.zhu_qpwd).clear()
+            self.deriver.find_element_by_class_name(self.zhu_qpwd).send_keys(password1)
+            self.deriver.find_element_by_class_name(self.zhu_shouji).clear()
+            self.deriver.find_element_by_class_name(self.zhu_shouji).send_keys(shouji)
+            self.deriver.find_element_by_class_name(self.zhu_email).clear()
+            self.deriver.find_element_by_class_name(self.zhu_email).send_keys(email)
+            self.deriver.find_element_by_class_name(self.zhu_butn).click()
+            if suc =="1":
+                self.zhu_su=self.deriver.find_element_by_id(self.zhu_suc).text
+                return self.zhu_su
+            if suc=='0':
+                self.zhu_e=self.deriver.find_element_by_xpath(self.zhu_err).text
+                return self.zhu_e
+        except Exception as e:
+            self.logs.error_log('用例执行失败，原因：%s' % e)
+        finally:
+            self.deriver.quit()
+class Zaohui_tes:
+    def __init__(self,driver):
+        self.driver=driver
+        self.logs = log.log_message()
+        self.file1=open(path+"\\data\\page_data.yaml", "r",encoding= "utf-8")
+        self.data=yaml.load(self.file1)
+        self.file1.close()
+        self.zhao_url=self.data['zhaohui'].get('url')
+        self.zhao_username=self.data['zhaohui'].get('username')
+        self.zhao_btn=self.data['zhaohui'].get('zhaohui_btn')
+        self.zhao_err=self.data['zhaohui'].get('zhaohui_err')
+        self.zhao_suc=self.data['zhaohui'].get('zhaohui_suc')
+        self.driver.get(self.zhao_url)
+    def zhaohui(self,suc,name,eamil):
+        try:
+            self.driver.find_element_by_css_selector(self.zhao_username).clear()
+            self.driver.find_element_by_css_selector(self.zhao_username).sned_keys(name)
+            self.driver.find_element_by_css_selector(self.zhao_eamil).clear()
+            self.driver.find_element_by_css_selector(self.zhao_eamil).sned_keys(eamil)
+            self.driver.find_element_by_css_selector(self.zhao_btn).click()
+            if suc == '1':
+                self.zhao_su=self.driver.find_element_by_css_selector(self.zhao_suc).text
+                return self.zhao_su
+            if suc =="0":
+                self.zhao_er=self.driver.find_element_by_xpath(self.zhao_err).text
+                return self.zhao_er
+        except Exception as e:
+            self.logs.error_log('用例执行失败，原因：%s' % e)
+        finally:
+            self.driver.quit()
+class Rest_tes:
+    def __init__(self,driver):
+        self.driver=driver
+        self.logs = log.log_message()
+        self.file1=open(path+"\\data\\page_data.yaml", "r",encoding= "utf-8")
+        self.data=yaml.load(self.file1)
+        self.file1.close()
+        self.rest_url=self.data['reset_pwd'].get('url')
+        self.rest_eamil=self.data['reset_pwd'].get('email')
+        self.reset_yan=self.data['reset_pwd'].get('yanzheng')
+        self.reset_mima=self.data['reset_pwd'].get('mima')
+        self.reset_mimaque=self.data['reset_pwd'].get('chongzhimima')
+        self.reset_btn=self.data['reset_pwd'].get('reset_btn')
+        self.reset_error=self.data['reset_pwd'].get('reset_error')
+        self.reset_suc=self.data['reset_pwd'].get('reset_suc')
+        self.driver.get(self.rest_url)
+    def rest(self,suc,yan,eamil,mima,chongzhimima):
+        try:
+            self.driver.find_element_by_css_selector(self.rest_eamil).clear()
+            self.driver.find_element_by_css_selector(self.rest_eamil).sned_keys(eamil)
+            self.driver.find_element_by_css_selector(self.reset_yan).clear()
+            self.driver.find_element_by_css_selector(self.reset_yan).sned_keys(yan)
+            self.driver.find_element_by_css_selector(self.reset_mima).clear()
+            self.driver.find_element_by_css_selector(self.reset_mima).sned_keys(mima)
+            self.driver.find_element_by_css_selector(self.reset_mimaque).clear()
+            self.driver.find_element_by_css_selector(self.reset_mimaque).sned_keys(chongzhimima)
+            self.driver.find_element_by_css_selector(self.reset_btn).click()
+            if suc =="1":
+                self.rest_su=self.driver.find_element_by_id(self.reset_suc).text
+                return self.rest_su
+            if suc=='0':
+                self.rest_err=self.driver.find_element_by_xpath(self.reset_error).text
+                return self.rest_err
+        except Exception as e:
+            self.logs.error_log('用例执行失败，原因：%s' % e)
+        finally:
+            self.driver.quit()
+class Xiugai_tes:
+    def __init__(self,driver):
+        title = '修改模块'
+        self.logs = log.log_message()
+        self.driver=driver
+        self.file1=open(path+"\\data\\page_data.yaml", "r",encoding= "utf-8")
+        self.data=yaml.load(self.file1)
+        self.file1.close()
+        self.xiugai_url=self.data['xiugai'].get('url')
+        self.xiugai_yuan=self.data['xiugai'].get('yuanmi')
+        self.xiugai_mima=self.data['xiugai'].get('xiugaimi')
+        self.xiugai_mimaque=self.data['xiugai'].get('xiugaimi1')
+        self.xiugai_btn=self.data['xiugai'].get('xiugai_but')
+        self.xiugai_suc=self.data['xiugai'].get('xiu_suc')
+        self.xiugai_error=self.data['xiugai'].get('xiu_err')
+        self.driver.get(self.xiugai_url)
+    def xiugai(self,suc,yuanmima,mima,querenmima):
+        try:
+            self.driver.find_element_by_css_selector(self.xiugai_yuan).clear()
+            self.driver.find_element_by_css_selector(self.xiugai_yuan).sned_keys(yuanmima)
+            self.driver.find_element_by_css_selector(self.xiugai_mima).clear()
+            self.driver.find_element_by_css_selector(self.xiugai_mima).sned_keys(mima)
+            self.driver.find_element_by_css_selector(self.xiugai_mimaque).clear()
+            self.driver.find_element_by_css_selector(self.xiugai_mimaque).sned_keys(querenmima)
+            self.driver.find_element_by_link_text(self.xiugai_btn).click()
+            if suc=='1':
+                 self.xiugai_su = self.driver.find_element_by_id(self.xiugai_suc).text
+                 return self.xiugai_su
+            if suc=='0':
+                self.xiugai_erro=self.driver.find_element_by_xpath(self.xiugai_error).text
+                return self.xiugai_erro
+        except Exception as e:
+            self.logs.error_log('用例执行失败，原因：%s' % e)
+        finally:
+            self.driver.quit()
\ No newline at end of file
diff --git a/python-selenium-master/case/__init__.py b/python-selenium-master/case/__init__.py
new file mode 100644
